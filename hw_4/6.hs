part :: Int -> Int -> [[Int]]
part n m
  | (n < 0) || (m <= 0) = error "must be: n >= 0 and m > 0!"
  | n == 0     = [replicate m 0]
  | m == 1     = [[n]]
  | otherwise  = concat [map ([k] ++) (part (n - k) (m - 1)) | k <- [0..n]]

-- Examples
{-
*Main> part 1 1
[[1]]
*Main> part 1 2
[[0,1],[1,0]]
*Main> part 0 1
[[0]]
*Main> part 0 2
[[0,0]]
*Main> part 3 2
[[0,3],[1,2],[2,1],[3,0]]
*Main> part 3 3
[[0,0,3],[0,1,2],[0,2,1],[0,3,0],[1,0,2],
 [1,1,1],[1,2,0],[2,0,1],[2,1,0],[3,0,0]]
*Main> part 3 4
[[0,0,0,3],[0,0,1,2],[0,0,2,1],[0,0,3,0],
 [0,1,0,2],[0,1,1,1],[0,1,2,0],[0,2,0,1],
 [0,2,1,0],[0,3,0,0],[1,0,0,2],[1,0,1,1],
 [1,0,2,0],[1,1,0,1],[1,1,1,0],[1,2,0,0],
 [2,0,0,1],[2,0,1,0],[2,1,0,0],[3,0,0,0]]
-}
